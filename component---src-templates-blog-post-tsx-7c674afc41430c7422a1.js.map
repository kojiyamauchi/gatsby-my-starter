{"version":3,"sources":["webpack:///./src/components/Presentations/BlogPostData.tsx","webpack:///./src/components/Presentations/BlogPostPagenation.tsx","webpack:///./src/components/Images/MarkdownImage.tsx","webpack:///./src/templates/blog-post.tsx"],"names":["BlogPostData","styled","className","categories","date","map","info","index","to","key","BlogPostPagenation","previous","next","rel","MarkdownImage","style","alt","id","allMarkdownRemark","useStaticQuery","fluid","nodes","find","frontmatter","image","childImageSharp","query","location","data","pageContext","title","markdownRemark","undefined","description","pagePath","pathname","dangerouslySetInnerHTML","__html","html","PagesStyle"],"mappings":"kNAqDaA,EA1BWC,aAbuB,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,KAA1B,OAC7C,wBAAIF,UAAcA,EAAL,SACX,wBAAIA,UAAU,YACXC,aADH,EACGA,EAAYE,KAAI,SAACC,EAAMC,GAAP,OACf,kBAAC,OAAD,CAAMC,GAAE,aAAeF,EAAf,IAAwBG,IAAKF,EAAOL,UAAU,iBACnDI,EADH,SAKJ,wBAAIJ,UAAU,QAAQE,OAIL,mFAAGH,CAAH,kPCmCRS,EA7BWT,aAnB6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWS,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,KAAxB,OACnD,wBAAIV,UAAWA,GACZS,GACC,wBAAIT,UAAU,QACZ,kBAAC,OAAD,CAAMM,GAAE,GAAKG,EAAYE,IAAI,OAAOX,UAAU,aAA9C,cAKHU,GACC,wBAAIV,UAAU,QACZ,kBAAC,OAAD,CAAMM,GAAE,GAAKI,EAAQC,IAAI,OAAOX,UAAU,aAA1C,kBAQa,0FAAGD,CAAH,oR,qBCjBRa,EAAiC,SAAC,GAA+C,YAA7CZ,EAA6C,EAA7CA,UAAWa,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,GAC9DC,EAAsBC,yBAAc,cAApCD,kBAmBR,OACE,kBAAC,IAAD,CACEhB,UAAWA,EACXa,MAAOA,EACPC,IAAKA,EAMLI,MAAK,UACHF,EAAkBG,MAAMC,MAAK,SAAChB,GAAD,eAAUA,SAAA,UAAAA,EAAMiB,mBAAN,mBAAmBC,aAAnB,eAA0BP,MAAOA,YADrE,iBACH,EAA6EM,mBAD1E,iBACH,EAA0FC,aADvF,iBACH,EAAiGC,uBAD9F,aACH,EAAkHL,S,YCtB7GM,EAAQ,WAwCNzB,uBAlB4B,SAAC,GAA4D,4BAA1DC,EAA0D,EAA1DA,UAAWyB,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,YACvE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAOF,SAAA,UAAAA,EAAMG,sBAAN,mBAAsBR,mBAAtB,eAAmCO,aAASE,EACnDC,aAAaL,SAAA,UAAAA,EAAMG,sBAAN,mBAAsBR,mBAAtB,eAAmCU,mBAAeD,EAC/DE,SAAUP,EAASQ,WAErB,yBAAKjC,UAAWA,GACd,yBAAKA,UAAU,UAAUkC,wBAAyB,CAAEC,QAAQT,SAAA,UAAAA,EAAMG,sBAAN,eAAsBO,OAAQ,MAC1F,kBAACtC,EAAD,CAAcG,WAAYyB,SAAF,UAAEA,EAAMG,sBAAR,iBAAE,EAAsBR,mBAAxB,aAAE,EAAmCpB,WAAYC,KAAMwB,SAAF,UAAEA,EAAMG,sBAAR,iBAAE,EAAsBR,mBAAxB,aAAE,EAAmCnB,OAClH,kBAAC,EAAD,CAAeF,UAAU,WAAWc,IAAI,aAAaC,GAAIW,SAAF,UAAEA,EAAMG,sBAAR,iBAAE,EAAsBR,mBAAxB,iBAAE,EAAmCC,aAArC,aAAE,EAA0CP,KACnG,kBAACP,EAAD,CAAoBC,SAAUkB,EAAYlB,SAAUC,KAAMiB,EAAYjB,YAM9E,4DAAeX,CAAf,mMACIsC","file":"component---src-templates-blog-post-tsx-7c674afc41430c7422a1.js","sourcesContent":["/*\n  Blog Post Data.\n*/\n\nimport React from 'react'\nimport { Link } from 'gatsby'\nimport styled from 'styled-components'\n\ntype Props = {\n  className?: string\n  categories?: (string | null)[] | null\n  date: string\n}\n\nconst BlogPostDataComponent: React.FC<Props> = ({ className, categories, date }): JSX.Element => (\n  <ul className={`${className} list`}>\n    <li className=\"category\">\n      {categories?.map((info, index) => (\n        <Link to={`/category/${info}/`} key={index} className=\"category-link\">\n          {info}.\n        </Link>\n      ))}\n    </li>\n    <li className=\"date\">{date}</li>\n  </ul>\n)\n\nconst StyledComponent = styled(BlogPostDataComponent)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 0 20px 0;\n\n  .category {\n    margin: 0 20px 0 0;\n  }\n\n  .category-link {\n    font-size: 2em;\n    display: inline-block;\n    margin: 0 5px 0 0;\n\n    &:last-of-type {\n      margin: 0;\n    }\n  }\n\n  .date {\n    font-size: 2em;\n    margin: 0 0 0 20px 0;\n  }\n`\n\nexport const BlogPostData = StyledComponent\n","/*\n  Blog Post Pagenation.\n*/\n\nimport React from 'react'\nimport { Link } from 'gatsby'\nimport styled from 'styled-components'\n\ntype Props = {\n  className?: string\n  previous: string | null\n  next: string | null\n}\n\nconst BlogPostPagenationComponent: React.FC<Props> = ({ className, previous, next }): JSX.Element => (\n  <ul className={className}>\n    {previous && (\n      <li className=\"prev\">\n        <Link to={`${previous}`} rel=\"prev\" className=\"prev-link\">\n          New Post.\n        </Link>\n      </li>\n    )}\n    {next && (\n      <li className=\"next\">\n        <Link to={`${next}`} rel=\"next\" className=\"next-link\">\n          Old Post.\n        </Link>\n      </li>\n    )}\n  </ul>\n)\n\nconst StyledComponent = styled(BlogPostPagenationComponent)`\n  width: 100%;\n  max-width: 500px;\n  display: grid;\n  grid-template-rows: none;\n  grid-template-columns: 50%;\n  padding: 0 20px;\n\n  .prev {\n    grid-row: 1 / 2;\n    grid-column: 1 / 2;\n    text-align: left;\n  }\n\n  .prev-link {\n    font-size: 2em;\n  }\n\n  .next {\n    grid-row: 1 / 2;\n    grid-column: 2 / 3;\n    text-align: right;\n  }\n\n  .next-link {\n    font-size: 2em;\n  }\n`\n\nexport const BlogPostPagenation = StyledComponent\n","/*\n  Markdown Image\n*/\n\nimport React, { CSSProperties } from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport GatsbyMarkdownImage, { FluidObject } from 'gatsby-image'\nimport { MarkdownImageQuery } from 'graphql-types'\n\ntype Props = {\n  className?: string\n  style?: CSSProperties\n  alt?: string\n  id?: string\n}\n\nexport const MarkdownImage: React.FC<Props> = ({ className, style, alt, id }): JSX.Element => {\n  const { allMarkdownRemark } = useStaticQuery<MarkdownImageQuery>(graphql`\n    query MarkdownImage {\n      allMarkdownRemark {\n        nodes {\n          frontmatter {\n            image {\n              id\n              childImageSharp {\n                fluid(quality: 90, maxWidth: 1000) {\n                  ...GatsbyImageSharpFluid_withWebp\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <GatsbyMarkdownImage\n      className={className}\n      style={style}\n      alt={alt}\n      /*\n        TODO:\n        gatsby-image <-> gatsby-plugin-graphql-codeine Too Match Type. gatsby-image/index.d.ts(31, 3)\n        Using gatsby-image/index.d.ts\n      */\n      fluid={\n        allMarkdownRemark.nodes.find((info) => info?.frontmatter?.image?.id === id)?.frontmatter?.image?.childImageSharp?.fluid as FluidObject | FluidObject[]\n      }\n    />\n  )\n  /* Add Below Code to the Components.\n  <MarkdownImage\n    className=\"img-logo\"\n    alt=\"ろご\"\n    style={{ width: '300px', height: '200px', display: 'block' }} // Optional.\n    id={data?.markdownRemark?.frontmatter?.image?.id}\n  /> */\n}\n","/*\n  Blog Post.\n*/\n\nimport React from 'react'\nimport { graphql } from 'gatsby'\nimport { SEO } from '@/components/seo'\nimport { Layout } from '@/components/layout'\nimport { BlogPostData } from '@/components/Presentations/BlogPostData'\nimport { BlogPostPagenation } from '@/components/Presentations/BlogPostPagenation'\nimport { MarkdownImage } from '@/components/Images/MarkdownImage'\nimport styled from 'styled-components'\nimport { PagesStyle } from '@/styles/StyleMixins'\nimport { BlogPostQuery } from 'graphql-types'\n\ntype Props = {\n  className?: string\n  location: { pathname: string }\n  data: BlogPostQuery\n  pageContext: {\n    id: string\n    [key: string]: string | null\n  }\n}\n\nexport const query = graphql`\n  query BlogPost($id: [String]!) {\n    markdownRemark(id: { in: $id }) {\n      html\n      frontmatter {\n        categories\n        date(formatString: \"YYYY/MM/DD\")\n        description\n        title\n        image {\n          id\n          childImageSharp {\n            fluid(quality: 90, maxWidth: 1000) {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nconst BlogPostComponent: React.FC<Props> = ({ className, location, data, pageContext }): JSX.Element => {\n  return (\n    <Layout>\n      <SEO\n        title={data?.markdownRemark?.frontmatter?.title || undefined}\n        description={data?.markdownRemark?.frontmatter?.description || undefined}\n        pagePath={location.pathname}\n      />\n      <div className={className}>\n        <div className=\"content\" dangerouslySetInnerHTML={{ __html: data?.markdownRemark?.html || '' }} />\n        <BlogPostData categories={data?.markdownRemark?.frontmatter?.categories} date={data?.markdownRemark?.frontmatter?.date} />\n        <MarkdownImage className=\"img-blog\" alt=\"Blog Image\" id={data?.markdownRemark?.frontmatter?.image?.id} />\n        <BlogPostPagenation previous={pageContext.previous} next={pageContext.next} />\n      </div>\n    </Layout>\n  )\n}\n\nexport default styled(BlogPostComponent)`\n  ${PagesStyle}\n  padding: 30px 0 20px;\n\n  .content {\n    width: 100%;\n    text-align: center;\n\n    h1 {\n      font-size: 4em;\n      margin: 0 0 20px 0;\n    }\n\n    p {\n      font-size: 3em;\n      margin: 0 0 20px 0;\n    }\n  }\n\n  .img-blog {\n    width: 100%;\n    max-width: 450px;\n    margin: 0 0 20px 0;\n  }\n`\n"],"sourceRoot":""}